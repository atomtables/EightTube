using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace EightTube.API
{
    [DataContract]
    public class RelatedChannels
    {
        [DataMember]
        public List<Channel> relatedChannels { get; set; }
        [DataMember]
        public string continuation { get; set; }
    }

    [DataContract]
    public class ChannelVideos
    {
        [DataMember]
        public List<Video> videos { get; set; }
        [DataMember]
        public string continuation { get; set; }
    }

    [DataContract]
    public class Channel : Searchable
    {
        [DataMember]
        public override string type { get; set; }
        [DataMember]
        public string author { get; set; }
        [DataMember]
        public string authorId { get; set; }
        [DataMember]
        public string authorUrl { get; set; }
        [DataMember]
        public List<Image> authorBanners { get; set; }
        [DataMember]
        public List<Image> authorThumbnails { get; set; }
        [IgnoreDataMember]
        public Image authorThumbnail { get { return this.authorThumbnails.Last(); } }

        [DataMember]
        public int subCount { get; set; }
        [IgnoreDataMember]
        public string subCountText { get { return FormatNumber(subCount); } }
        [DataMember]
        public long totalViews { get; set; }
        [DataMember]
        public long joined { get; set; }
        [IgnoreDataMember]
        public DateTime joinedDate { get { return ConvertEpochToDateTime(joined); } }

        [DataMember]
        public bool autoGenerated { get; set; }
        [DataMember]
        public bool isFamilyFriendly { get; set; }

        [DataMember]
        public string description { get; set; }
        [DataMember]
        public string descriptionHtml { get; set; }
        [DataMember]
        public List<string> allowedRegions { get; set; }

        [DataMember]
        public List<string> tabs { get; set; }

        [DataMember]
        public List<Video> latestVideos { get; set; }
        [DataMember]
        public List<Channel> relatedChannels { get; set; }

        public static async Task<ChannelVideos> loadVideos(string channelId)
        {
            return await Invidious.load<ChannelVideos>($"Fetching videos for channel {channelId}", Preferences.Channel + $"/{channelId}/videos");
        }

        public static async Task<ChannelVideos> loadVideos(string channelId, string continuation)
        {
            return await Invidious.load<ChannelVideos>($"Fetching videos for channel {channelId}", Preferences.Channel + $"/{channelId}/videos?continuation={continuation}");
        }

        public static async Task<ChannelVideos> loadShorts(string channelId)
        {
            return await Invidious.load<ChannelVideos>($"Fetching shorts for channel {channelId}", Preferences.Channel + $"/{channelId}/shorts");
        }

        public static async Task<ChannelVideos> loadShorts(string channelId, string continuation)
        {
            return await Invidious.load<ChannelVideos>($"Fetching shorts for channel {channelId}", Preferences.Channel + $"/{channelId}/shorts?continuation={continuation}");
        }

        public static async Task<ChannelVideos> loadStreams(string channelId)
        {
            return await Invidious.load<ChannelVideos>($"Fetching streams for channel {channelId}", Preferences.Channel + $"/{channelId}/streams");
        }

        public static async Task<ChannelVideos> loadStreams(string channelId, string continuation)
        { 
            return await Invidious.load<ChannelVideos>($"Fetching streams for channel {channelId}", Preferences.Channel + $"/{channelId}/streams?continuation={continuation}");
        }

        public static async Task<List<Channel>> loadRelatedChannels(string channelId)
        {
            return (await Invidious.load<RelatedChannels>($"Fetching channels for channel {channelId}", Preferences.Channel + $"/{channelId}/channels")).relatedChannels;
        }
    }
}
